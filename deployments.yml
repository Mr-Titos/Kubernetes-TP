apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  namespace: tp-namespace
spec:
  replicas: 1 # Le volume ne supporte pas ReadWriteMany sur Windows ðŸ˜¢
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db-container
        image: mysql:8.0.27
        ports:
        - containerPort: 3306
        - containerPort: 33060
        env:
        - name: MYSQL_RANDOM_ROOT_PASSWORD
          value: "1"
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_NAME
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DB_PASSWORD
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/mysql
        readinessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 20
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 25
          periodSeconds: 10
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: db-data-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: db-service
  namespace: tp-namespace
spec:
  selector:
    app: db
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-deployment
  namespace: tp-namespace
spec:
  replicas: 2
  selector:
    matchLabels:
      app: back
  template:
    metadata:
      labels:
        app: back
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - kind-worker
                - kind-worker2
      containers:
      - name: back-container
        image: tit0s/tp_back:3.2
        ports:
        - containerPort: 3000
        env:
        - name: BACK_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: BACK_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DB_PASSWORD
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_HOST
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10

---

apiVersion: v1
kind: Service
metadata:
  name: back-service
  namespace: tp-namespace
spec:
  selector:
    app: back
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-deployment
  namespace: tp-namespace
spec:
  replicas: 2
  selector:
    matchLabels:
      app: front
  template:
    metadata:
      labels:
        app: front
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - kind-worker
                - kind-worker2
      containers:
      - name: front-container
        image: tit0s/tp_front:4.0
        ports:
        - containerPort: 80
        env:
        - name: BACK_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: BACK_PORT
        - name: BACK_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_HOST
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10

---

apiVersion: v1
kind: Service
metadata:
  name: front-service
  namespace: tp-namespace
spec:
  selector:
    app: front
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
